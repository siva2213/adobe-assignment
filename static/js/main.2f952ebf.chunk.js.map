{"version":3,"sources":["containers/ProductList/ProductList.jsx","containers/CartContainer/CartContainer.jsx","containers/ProductOrderLayout/ProductOrderLayout.jsx","App.js","constants/index.js","serviceWorker.js","index.js"],"names":["ProductList","props","className","productList","map","product","key","name","discount","alt","src","image","height","style","color","price","display","actual","onClick","onSelectedProducts","CartContainer","state","this","selectedItems","selectedProducts","onDeleteProduct","onDecrease","quantity","onIncrease","totalAmount","discountedAmount","totalOrderValue","Component","ProductOrderLayout","orderCalculations","modifiedState","displaySum","reduce","acc","cur","actualSum","setState","orderCalculationsOnIncreaseAndDecrease","selectedProd","length","every","item","prevState","cloneDeep","push","selectedProduct","filter","prod","Object","keys","id","console","log","ProductListData","items","App","path","base_url","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f952ebf.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./ProductList.css\";\n\nexport default function ProductList(props) {\n  return (\n    <div className=\"card-container\">\n      {props.productList.map((product) => {\n        return (\n          <div className=\"card-body\" key={product.name}>\n            <div className=\"product-img\">\n              <div className=\"offer-tag\">{product.discount}% off</div>\n              <img alt={product.name} src={product.image} height=\"175\" />\n            </div>\n            <div>\n              <div className=\"product-desc\">{product.name}</div>\n              <div className=\"product-desc\">\n                <div className=\"product-desc\">\n                  <span\n                    style={{ color: \"red\", \"text-decoration\": \"line-through\" }}\n                  >\n                    ${product.price.display}\n                  </span>\n                  &nbsp;${product.price.actual}\n                </div>\n                <div className=\"product-desc\">\n                  <button onClick={() => props.onSelectedProducts(product)}>\n                    Add to cart\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import React, { Component, Fragment } from \"react\";\nimport \"./CartContainer.css\";\n\nclass CartContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div className=\"cart-container\">\n        <div className=\"items-list\">\n          <div className=\"item-header item\">\n            <div className=\"item-content\">Items{this.props.selectedItems}</div>\n            <div className=\"item-content\">Qty</div>\n            <div className=\"item-content\">Price</div>\n          </div>\n          {/* //array */}\n          {this.props.selectedProducts.map((product) => {\n            return (\n              <div className=\"item-inner-content\" key={product.name}>\n                <div className=\"item-content\">\n                  <div className=\"item-content-desc-actions\">\n                    {/* <div className=\"item-content-desc-action\">*</div> */}\n                    <div className=\"item-content-desc-action\">\n                      {product.name}\n                    </div>\n                    <div\n                      className=\"item-content-desc-action pointer\"\n                      onClick={() => this.props.onDeleteProduct(product)}\n                    >\n                      x\n                    </div>\n                  </div>\n                </div>\n                <div className=\"item-content\">\n                  <div className=\"inc-dec-actions\">\n                    <div\n                      className=\"inc-dec-action\"\n                      onClick={() => this.props.onDecrease(product)}\n                    >\n                      -\n                    </div>\n                    <div className=\"inc-dec-action\">${product.quantity}</div>\n                    <div\n                      className=\"inc-dec-action\"\n                      onClick={() => this.props.onIncrease(product)}\n                    >\n                      +\n                    </div>\n                  </div>\n                </div>\n                <div className=\"item-content\">${product.price.display}</div>\n              </div>\n            );\n          })}\n\n          {/* //array */}\n        </div>\n        <div className=\"divider\"></div>\n        <div className=\"total-content\">\n          <strong>Total</strong>\n          {/* //array */}\n          <div className=\"total-content-list\">\n            <div className=\"total-content-desc\">\n              Items{this.props.selectedItems}\n            </div>\n            <div className=\"total-content-desc\">:</div>\n            <div className=\"total-content-desc\">${this.props.totalAmount}</div>\n          </div>\n          <div className=\"total-content-list\">\n            <div className=\"total-content-desc\">Discount</div>\n            <div className=\"total-content-desc\">:</div>\n            <div className=\"total-content-desc\">\n              -${this.props.discountedAmount}\n            </div>\n          </div>\n          <div className=\"total-content-list\">\n            <div className=\"total-content-desc\">Type Discount</div>\n            <div className=\"total-content-desc\">:</div>\n            <div className=\"total-content-desc\">-$0</div>\n          </div>\n          <div className=\"total-content-list\">\n            <div className=\"total-content-desc\">Order Total</div>\n            <div className=\"total-content-desc\">:</div>\n            <div className=\"total-content-desc\">\n              ${this.props.totalOrderValue}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CartContainer;\n","import React, { Component } from \"react\";\nimport ProductListData from \"../../shared/dummydata.json\";\nimport ProductList from \"../ProductList/ProductList\";\nimport CardContainer from \"../CartContainer/CartContainer\";\nimport \"./ProductOrderLayout.css\";\nimport { cloneDeep } from \"lodash\";\n\nclass ProductOrderLayout extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      productList: [],\n      selectedProducts: [],\n      selectedProduct: {},\n      totalAmount: \"\",\n      discountedAmount: \"\",\n      totalOrderValue: \"\",\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    console.log(ProductListData);\n    if (!state.productList.length) {\n      state.productList = ProductListData.items;\n    }\n    return state;\n  }\n\n  orderCalculations = (modifiedState) => {\n    let displaySum = modifiedState.reduce((acc, cur) => {\n      return +acc + +cur.price.display;\n    }, 0);\n    let actualSum = modifiedState.reduce((acc, cur) => {\n      return +acc + +cur.price.actual;\n    }, 0);\n    let discountedAmount = displaySum - actualSum;\n    this.setState({\n      totalAmount: displaySum,\n      discountedAmount: discountedAmount,\n      totalOrderValue: actualSum,\n    });\n  };\n  orderCalculationsOnIncreaseAndDecrease = (modifiedState, quantity) => {\n    let displaySum = modifiedState.reduce((acc, cur) => {\n      return +acc + +cur.price.display;\n    }, 0);\n    let actualSum = modifiedState.reduce((acc, cur) => {\n      return +acc + +cur.price.actual;\n    }, 0);\n    let discountedAmount = displaySum - actualSum;\n    this.setState({\n      totalAmount: +displaySum * +quantity,\n      discountedAmount: +discountedAmount * +quantity,\n      totalOrderValue: +actualSum * +quantity,\n    });\n  };\n\n  onSelectedProducts = (selectedProd) => {\n    if (\n      this.state.selectedProducts &&\n      this.state.selectedProducts.length &&\n      this.state.selectedProducts.every(\n        (item) => item.name !== selectedProd.name\n      )\n    ) {\n      selectedProd[\"quantity\"] = 1;\n      this.setState((prevState) => {\n        let modifiedState = cloneDeep(prevState.selectedProducts);\n        modifiedState.push(selectedProd);\n        this.orderCalculations(modifiedState);\n        return {\n          selectedProducts: modifiedState,\n          selectedProduct: selectedProd,\n        };\n      });\n    } else if (\n      this.state.selectedProducts &&\n      !this.state.selectedProducts.length\n    ) {\n      selectedProd[\"quantity\"] = 1;\n      this.setState({\n        selectedProducts: [selectedProd],\n        selectedProduct: selectedProd,\n        totalAmount: selectedProd.price.display,\n        discountedAmount:\n          selectedProd.price.display - selectedProd.price.actual,\n        totalOrderValue: selectedProd.price.actual,\n      });\n    }\n  };\n\n  onDeleteProduct = (selectedProd) => {\n    this.setState((prevState) => {\n      let modifiedState = prevState.selectedProducts.filter(\n        (prod) => prod.name !== selectedProd.name\n      );\n      this.orderCalculations(modifiedState);\n      return {\n        selectedProducts: modifiedState,\n      };\n    });\n  };\n\n  onIncrease = (selectedProd) => {\n    this.setState((prevState) => {\n      let modifiedState = cloneDeep(prevState.selectedProducts).map((prod) => {\n        if (prod.name === selectedProd.name) {\n          prod.quantity = prod.quantity + 1;\n          return prod;\n        }\n        return prod;\n      });\n      this.orderCalculationsOnIncreaseAndDecrease(\n        modifiedState,\n        selectedProd.quantity + 1\n      );\n      return {\n        selectedProducts: modifiedState,\n      };\n    });\n  };\n  onDecrease = (selectedProd) => {\n    if (!(selectedProd.quantity - 1)) {\n      this.onDeleteProduct(selectedProd);\n    } else {\n      this.setState((prevState) => {\n        let modifiedState = cloneDeep(prevState.selectedProducts).map(\n          (prod) => {\n            if (prod.name === selectedProd.name) {\n              prod.quantity = prod.quantity - 1;\n              return prod;\n            }\n            return prod;\n          }\n        );\n        this.orderCalculationsOnIncreaseAndDecrease(\n          modifiedState,\n          selectedProd.quantity - 1\n        );\n        return {\n          selectedProducts: modifiedState,\n        };\n      });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"page-header\">\n          <div className=\"page-header-content\">All Items</div>\n          {this.state.selectedProduct &&\n          Object.keys(this.state.selectedProduct).length ? (\n            <div className=\"page-header-content\">\n              {this.state.selectedProduct.name} is added to cart\n            </div>\n          ) : (\n            <div></div>\n          )}\n          <div className=\"page-header-content\"></div>\n        </div>\n        <div id=\"content\">\n          <div className=\"inner-content\">\n            <ProductList\n              productList={this.state.productList}\n              onSelectedProducts={this.onSelectedProducts}\n            />\n          </div>\n          <div className=\"inner-content\">\n            <CardContainer\n              selectedItems={\n                this.state.selectedProducts.length === 0\n                  ? \"\"\n                  : this.state.selectedProducts.length\n              }\n              onDecrease={this.onDecrease}\n              onIncrease={this.onIncrease}\n              selectedProducts={this.state.selectedProducts}\n              onDeleteProduct={this.onDeleteProduct}\n              totalOrderValue={this.state.totalOrderValue}\n              discountedAmount={this.state.discountedAmount}\n              totalAmount={this.state.totalAmount}\n            />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ProductOrderLayout;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport ProductOrderLayout from \"./containers/ProductOrderLayout/ProductOrderLayout\";\nimport \"./App.css\";\nimport { __product_list_path } from \"./constants\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div id=\"app-container\">\n        <Router>\n          <Route\n            path={__product_list_path}\n            component={ProductOrderLayout}\n          ></Route>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const base_url = process.env.PUBLIC_URL;\n\n//Routes\nconst __product_list_path = base_url + \"/\";\n\nexport { __product_list_path };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}